import imageProcessorWorker from"./workers/imageProcessor.js";const imageInput=document.getElementById("imageInput"),originalCanvas=document.getElementById("originalCanvas"),processedCanvas=document.getElementById("processedCanvas"),filtersContainer=document.getElementById("filters"),performanceMetricsContainer=document.getElementById("performanceMetrics");let originalImage,processedImage,activeFilter;imageInput.addEventListener("change",(e=>{const a=e.target.files[0];if(a){const e=new FileReader;e.onload=()=>{originalImage=new Image,originalImage.src=e.result,originalImage.onload=()=>{originalCanvas.width=originalImage.width,originalCanvas.height=originalImage.height,processedCanvas.width=originalImage.width,processedCanvas.height=originalImage.height;const e=originalCanvas.getContext("2d");e.drawImage(originalImage,0,0);const a=e.getImageData(0,0,originalImage.width,originalImage.height);processedImage=new ImageData(new Uint8ClampedArray(a.data),originalImage.width,originalImage.height),loadFilters()}},e.readAsDataURL(a)}}));const applyFilter=e=>{activeFilter=e;const a=performance.now();imageProcessorWorker.postMessage(processedImage),imageProcessorWorker.onmessage=e=>{processedImage=e.data;processedCanvas.getContext("2d").putImageData(processedImage,0,0);const t=performance.now()-a;performanceMetricsContainer.textContent=`Filter: ${activeFilter}, Processing Time: ${t.toFixed(2)} ms`}},loadFilters=()=>{["Grayscale"].forEach((e=>{const a=document.createElement("button");a.textContent=e,a.addEventListener("click",(()=>applyFilter(e))),filtersContainer.appendChild(a)}))};